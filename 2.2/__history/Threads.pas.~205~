unit Threads;

interface

{#region Uses}                                   {$REGION}
uses
	Windows, SysUtils, Classes, Dialogs, ShellApi, encoder; {$ENDREGION}

{#region Classes}                                {$REGION}
type
	TDataThread = class(TThread)
	procedure UpdateVCL;
	private
		const
			{Synchronized functions}
			TrackbarPerform_onchange 		=	 0;
			Form39_Draw_graph						=	 1;
			lock_controls								=	 2;
			unlock_controls							=	 3;
			form39_label39_caption			=	 4;
			progressform_panel1_caption	=	 5;
			form38_richedit1_lines_add	=	 6;
			batchform_enable						=	 7;
			messagedlg_overwrite				=	 8;
			messagedlg_readerror				=  9;
			batchform_hide							=	10;
			batchform_show              = 11;
			messagedlg_warning					=	12;
			Form38_Cleanup_Form					=	13;
			ShellExecute_explore 				=	14;
			messagedlg_DynProcError			=	15;
		var
		id							: integer;
		MessageDlgResult: integer;

		procedure Call(func: cardinal; params: string);
		procedure Stegano(data: PByteArray);
	protected
		procedure Execute; override;
	public
		Todo: AnsiString;
		progress 				: extended;
		speed						:	extended;
		_FileSize				:	int64;
		BlockSize				:	int64;
		params					: string;
	end;
	TVCLThread = class(TThread)

	private

	protected
		procedure Execute; override;
	end;
																								 {$ENDREGION}

	procedure run(todo: string); overload;
	procedure run(todo,params: string); overload;

{#region Variables/Constants}                    {$REGION}
const
		Thresold 				: Integer 	= 16777216; //16 Mb
		_64Mb						: Integer		= 67108864;	//64 Mb
		UpdateInterval 	: cardinal 	= 50; 			//50 ms

		dp_encode2									= $0;
		dp_decode2									= $1;

var DataThread			: TDataThread;
		VCLThread				: TVCLThread;                {$ENDREGION}

implementation

uses {encoder,} Unit38, Unit40, TABPGDLG, Unit39, Batch, Functions, key_generator,
  Unit41;

{#region TDataThread.Execute}{$REGION}

procedure TDataThread.Execute;	// God object, hi! ^_^

	function DynProc(Data: PAnsiString; Proc: Cardinal): boolean;

	var	i				 : integer;
			onebyte	 : byte;
			keyptr2	 : PKey2;
			TextSafe : Boolean;
	begin
		result := false;
		if data = nil then
			EXIT;
		keyPTR2 := @Table2;
		TextSafe := passPrompt.TextSafe.checked;
		case proc of
			dp_encode2, dp_decode2: begin
				_FileSize := length(data^);
				self.BlockSize := 1024;
				if _FileSize = 0 then
					EXIT;
				for I := 0 to 255 do
					table[i] := i;
				i := 0;
				while i <= _FileSize div 1024 do begin
					if i = 0 then begin
						i := -1;
						onebyte := 1;
					end else
						onebyte := 0;
					if TextSafe then
						generate_random_key(0, 1024, 32, 255, false, keyPtr2)
					else
						generate_random_key(0, 1024,  0, 255, false, keyPtr2);
					if proc = dp_encode2 then
						invert(keyPtr2);
					file_decode_2dimm(data, keyPTR2, 0, i shl 10);
					inc(i, onebyte + 1);
					if (_filesize >= 1024) then
						progress := i / (_filesize div 1024);
				end;
				setLength(Table2, 0);
			end
			else EXIT;
		end;
		result := true;
	end;

var
		_file,_file1		: file;
		FileStream1			:	TFileStream;
		FileStream2			:	TFileStream;
		buf							:	array[0..4095] of byte;
		frequence				: TFrequency;
		onebyte     		:	byte;
		i,i2,i3,i4			:	integer;
		I64,I264				: int64;
		_FilePos				: int64;
		ext							: extended;
		turbo_mode			:	boolean;
		freq_analyze		:	boolean;
		batch_overwrite	:	boolean;
		res							:	boolean;
		pointer					: PAnsiString;
		keyptr					: PKey;
		keyptr2					: PKey2;
		t0							: cardinal;
		FileName				:	string;
		SaveName				:	string;
		TopDir,tmp			:	string;
		wideStr					: WideString;
		FileTimes				: TFileTimes;
		Byte_Array			:	TByteArray;

	procedure DynBlockRead( Pass: Cardinal);
	begin
		case pass of
			1: begin
					I3 := 0;
					while i3 < 16384 do begin
						FileStream1.Read(buf,4096);
						i4 := 0;
						while i4 < 4096 do begin
							binary_data[I3*4096 + i4 + 1]:=chr(buf[i4]);
							inc(i4);
						end;
						self.progress := self.progress + (4096 / 3 / _FileSize);
						inc(i3);
					end;
				 end;
			2: begin
					i64:= _FileSize - Trunc(_FileSize/ _64Mb) * _64Mb	;
					i64:= Trunc(i64 / 4096); // count of 4 Kb blocks
					blockSize := i64*4096;
					setLength(binary_data, i64*4096);
					i264 := 0;
					while I264 < i64 do begin
						FileStream1.Read(buf,4096);
						i4 := 0;
						while i4 < 4096 do begin
							binary_data[I264*4096 + i4 + 1]:=chr(buf[i4]);
							inc(i4);
						end;
						self.progress := self.progress + 4096 / _FileSize / 3;
						inc(i264);
					end;
				 end;
			3: begin
					i := _FileSize - Trunc(_FileSize / 4096) * 4096; //count last bytes
					blockSize := i;
					SetLength(binary_data,I);
					FileStream1.Read(buf,i);
					i4 := 0;
					while i4 < i do begin
						binary_data[i4 + 1] := chr(buf[i4]);
						inc(i4);
					end;
				 end;
		end;
	end;

	procedure DynBlockWrite(Pass: Cardinal);
	begin
		case pass of
			1: begin
					i3 := 0;
					while i3 < 16384 do begin
						i4 := 0;
						while i4 < 4096 do begin
							buf[i4] := ord(binary_data[I3*4096 + i4 + 1]);
							inc(i4);
						end;
						FileStream2.Write(buf,4096);
						self.progress := self.progress + (4096 / 3 / _FileSize);
						inc(i3);
					end;
				 end;
			2: begin
					i264 := 0;
					while I264 < i64 do begin
						i4 := 0;
						while i4 < 4096 do begin
							buf[i4] := ord(binary_data[I264*4096 + i4 + 1]);
							inc(i4);
						end;
						FileStream2.Write(buf,4096);
						self.progress := self.progress + 4096 / _FileSize / 3;
						inc(i264);
					end;
				 end;
			3: begin
					i4 := 0;
					while i4 < i do begin
						buf[i4] := ord(binary_data[i4 + 1]);
						inc(i4);
					end;
					FileStream2.Write(buf, I);
				 end;
		end;
	end;

label F00000,
			_exit;

begin
Form39.maskcollector;
pointer 		 := @binary_data;
keyPtr			 := @table;
keyPtr2 		 := @table2;
freq_analyze := pagesdlg.checkbox1.checked;
turbo_mode 	 := pagesdlg.checkbox4.checked;
t0					 := gettickcount;
encoder.progress		 := 0;
self.progress				 := 0;
batch_overwrite:=false;
ToDo				 := AnsiLowerCase(todo);
VCLThread := TVCLThread.Create(True);
VCLThread.FreeOnTerminate := True;
VCLThread.Resume;

{#region encode/decode/encode2/decode2/encodeDyn/decodeDyn/frequency}{$REGION}
if Todo = 'encode' then begin
	Call(progressform_panel1_caption, SEncoding);
	_FileSize := length(binary_data);
	if turbo_mode then begin
		invert(keyptr);
		file_decode(pointer,keyptr); // :-)
		invert(keyptr);
	end else
		file_encode(pointer,keyptr);
	if freq_analyze then begin
		Call(progressform_panel1_caption, SFrequencing);
		unit38.frequence := Frequency_analysis(@binary_data);
		Call(Form39_Draw_graph,'');
	end;
	Call(TrackbarPerform_onchange,'');
	Call(form39_label39_caption, SProcTime + inttostr(gettickcount-t0)+'ms');
	Call(unlock_controls,'');
end else

if Todo = 'decode' then begin
	 Call(progressform_panel1_caption, SDecoding);
	 _FileSize := length(binary_data);
	 file_decode(pointer,keyptr);
	 if freq_analyze then begin
		Call(progressform_panel1_caption, SFrequencing);
		unit38.frequence := Frequency_analysis(@binary_data);
		Call(Form39_Draw_graph,'');
	 end;
	 Call(TrackbarPerform_onchange,'');
	 Call(form39_label39_caption, SProcTime + inttostr(gettickcount-t0)+'ms');
	 Call(unlock_controls,'');
end
else

if Todo = 'encode_2dimm' then begin
	Call(progressform_panel1_caption, SEncoding2);
	_FileSize := length(binary_data);
	if turbo_mode then begin
		invert(keyptr2);
		file_decode_2dimm(pointer,keyptr2); // :-)
		invert(keyptr2);
	end else
		file_encode_2dimm(pointer,keyptr2);
	if freq_analyze then begin
		Call(progressform_panel1_caption, SFrequencing);
		unit38.frequence := Frequency_analysis(@binary_data);
		Call(Form39_Draw_graph,'');
	end;
	Call(TrackbarPerform_onchange,'');
	Call(form39_label39_caption, SProcTime + inttostr(gettickcount-t0)+'ms');
	Call(unlock_controls,'');
end else

if Todo = 'decode_2dimm' then begin
	Call(lock_controls,'');
	Call(progressform_panel1_caption, SDecoding2);
	_FileSize := length(binary_data);
	file_decode_2dimm(pointer,keyptr2);
	if freq_analyze then begin
		Call(progressform_panel1_caption, SFrequencing);
		unit38.frequence := Frequency_analysis(@binary_data);
		Call(Form39_Draw_graph,'');
	end;
	Call(TrackbarPerform_onchange,'');
	Call(form39_label39_caption,SProcTime + inttostr(gettickcount-t0)+'ms');
	Call(unlock_controls,'');
end else

if (Todo = 'encode_dyn') or (Todo = 'decode_dyn') then begin
	Call(lock_controls,'');
	if Todo ='encode_dyn' then
		Call(progressform_panel1_caption, SEncoding2)
	else
		Call(progressform_panel1_caption, SDecoding2);
	for I := 0 to 255 do
		table[i] := i;
	if not binary_mode and pagesDlg.CheckBox2.Checked and (Todo = 'decode_dyn') then
		pointer^ := decode(garbage_collector(pointer^),keyPtr);
	{_FileSize := length(pointer^);
	i := 0;
	while i <= _FileSize div 1024 do begin
		if i = 0 then begin
			i := -1;
			onebyte := 1;
		end else
			onebyte := 0;
		if passPrompt.TextSafe.checked then
			generate_random_key(0, 1024, 32, 255, false, keyPtr2)
		else
			generate_random_key(0, 1024,  0, 255, false, keyPtr2);
		if (Todo = 'encode_dyn') then
			invert(keyPtr2);
		file_decode_2dimm(pointer, keyPtr2, 0, i shl 10);
		inc(i, onebyte + 1);
		if _filesize >= 1024 then
			progress := i / (_filesize div 1024);
	end;
	setLength(Table2, 0);}
	F00000:
	if Todo = 'encode_dyn' then
		res := DynProc(pointer, dp_encode2){ DONE : Error message on DynProc }
	else
		res := DynProc(pointer, dp_decode2);
	if not res then begin
		Call(messagedlg_dynProcError,FileName);
		case MessageDlgResult of
			4: goto _exit;  //abort
			5: goto F00000; //retry
			6: ;            //ignore
		end;
	end;

	for I := 0 to 255 do
		table[i] := i;
	if freq_analyze then begin
		Call(progressform_panel1_caption, SFrequencing);
		unit38.frequence := Frequency_analysis(@binary_data);
		Call(Form39_Draw_graph,'');
	end;
	if not binary_mode then begin
		if pagesDlg.CheckBox2.Checked and (Todo = 'encode_dyn') then
			binary_data := encode( 		binary_data,
																keyptr,
																strtoint(pagesdlg.Edit1.text),
																pagesdlg.edit2.text
															);
		Call(form38_richedit1_lines_add,'');
		binary_data := '';
	end;

	Call(TrackbarPerform_onchange,'');
	Call(form39_label39_caption, SProcTime + inttostr(gettickcount-t0)+'ms');
	Call(unlock_controls,'');
end else

if ToDo = 'frequency_analysis' then
begin
	Call(progressform_panel1_caption, SFrequencing);
	_FileSize := length(binary_data);
	unit38.frequence := Frequency_analysis(@binary_data);
	Call(Form39_Draw_graph,'');
	Call(unlock_controls,'');
end else
{$ENDREGION}

{#region load/save file}{$REGION}
if ToDo = 'load_file' then
begin
	Call(progressform_panel1_caption, SFileReading);
	assignfile(_file,form38.tetxtload.FileName);
	reset(_file,1);
	_fileSize := fileSize(_file);
	closeFile(_file);
	if load_file(form38.tetxtload.FileName,False) then
		Call(TrackbarPerform_onchange,'')
	else Call(Form38_Cleanup_Form,'');

	synchronize(progressform.Close);
	Call(unlock_controls,'');
end else

if ToDo = 'save_file' then
begin
	Call(progressform_panel1_caption, SFileWriting);
	save_file(form38.codesave.filename,True);
	synchronize(progressform.Close);
	Call(TrackbarPerform_onchange,'');
	Call(unlock_controls,'');
end else
{$ENDREGION}

{#region Batch}{$REGION}
if ToDo = 'batch' then
begin
	Call(batchform_hide,'');
	if batchForm.CheckBox4.Checked and (not batchForm.CheckBox5.Checked) then
		TopDir := ExtractTopLevelDir(batchForm.ListBox1.Items);
				i := 0; while i < batchForm.listbox1.items.Count do begin
					FileName := batchForm.ListBox1.Items[i];
					if batchForm.CheckBox3.Checked then
						FileTimes := GetFileTimes(FileName);
					if FileExists(FileName) then begin
						try
							load_file(FileName,False);
						except
							if batchForm.CheckBox2.Checked then begin
								inc(i);
								Continue;
							end
							else begin
								Call(messagedlg_readerror,FileName);
								case MessageDlgResult of
									4: break;                          //abort
									5: begin inc(i,-1); continue; end; //retry
									6: continue;                       //ignore
								end;
							end;
						end;
						if (batchForm.CheckBox1.Checked and not batchForm.CheckBox5.Checked) then
							DeleteFile(FileName);
						if batchForm.CheckBox11.Checked then
							case batchForm.listbox2.ItemIndex of
								0,1: begin
											if passPrompt.TextSafe.Checked then
												generate_random_key(0, 1, 32, 255, true, keyptr2)
											else
												generate_random_key(0, 1,  0, 255, true, keyptr2);
											table := table2[0];
											setLength(table2, 0);
										end;
							end;
						case batchForm.listbox2.ItemIndex of
{encode}		0: begin
								Call(progressform_panel1_caption,SBatchProcessing +
											inttostr(i)+' of '+
											inttostr(batchForm.listbox1.items.Count)+' done');
								if turbo_mode then begin
									invert(keyptr);
									file_decode(@binary_data,keyptr); // :-)
									invert(keyptr);
								end else
									file_encode(@binary_data,keyptr);
							 end;
{decode}		1: begin
								Call(progressform_panel1_caption,SBatchProcessing +
											inttostr(i)+' of '+
											inttostr(batchForm.listbox1.items.Count)+' done');
								file_decode(@binary_data,keyptr);
							 end;
{encode2}		2: begin
								Call(progressform_panel1_caption,SBatchProcessing +
											inttostr(i)+' of '+
											inttostr(batchForm.listbox1.items.Count)+' done');
								if batchForm.CheckBox11.Checked then begin
									res := DynProc(@binary_data, dp_encode2);
									if not res then begin
										Call(messagedlg_dynProcError,FileName);
										case MessageDlgResult of
											4: break;                          //abort
											5: begin inc(i,-1); continue; end; //retry
											6: continue;                       //ignore
										end;
									end;
								end else if turbo_mode then begin
									invert(keyptr2);
									file_decode_2dimm(@binary_data,keyptr2); // :-)
									invert(keyptr2);
								end else
									file_encode_2dimm(@binary_data,keyptr2);
							 end;
{decode2}		3: begin
								Call(progressform_panel1_caption,SBatchProcessing +
											inttostr(i)+' of '+
											inttostr(batchForm.listbox1.items.Count)+' done');
								if batchForm.CheckBox11.Checked then begin
									res := DynProc(@binary_data, dp_decode2);
									if not res then begin
										Call(messagedlg_dynProcError,FileName);
										case MessageDlgResult of
											4: break;                          //abort
											5: begin inc(i,-1); continue; end; //retry
											6: continue;                       //ignore
										end;
									end;
								end else
									file_decode_2dimm(@binary_data,keyptr2);
							 end;
{frequency}	4: begin
								Call(progressform_panel1_caption,SBatchProcessing +
											inttostr(i)+' of '+
											inttostr(batchForm.listbox1.items.Count)+' done');
								frequence := Frequency_Analysis(@binary_data);
								binary_data:='';
								for I2 := 0 to 255 do
									if batchForm.CheckBox7.Checked then
										binary_data := binary_data + inttostr(i2)+' '+inttostr(frequence[i2]) + #$0D + #$0A
									else
										binary_data := binary_data + inttostr(frequence[i2]) + #$0D + #$0A;
								FileName := FileName + '.txt';
							 end;
						end;
						if batchForm.CheckBox5.Checked then
							save_file(FileName,True)
						else begin
							if batchForm.CheckBox4.Checked then begin
								FileName := IncludeTrailingBackSlash(batchForm.Edit1.Text) +
										StringReplace(FileName,IncludeTrailingBackSlash(TopDir),'',[]);
								ForceDirectories(ExtractFilePath(FileName));
							end
							else
							FileName := IncludeTrailingBackSlash(batchForm.Edit1.Text)+
									ExtractFileName(FileName);
							if (FileExists(FileName) and (not batch_overwrite)) then
								case batchForm.ComboBox1.ItemIndex of
									0:;
									1: begin
											Call(messagedlg_overwrite,FileName);
											case MessageDlgResult of
													6:	;
													7:	begin inc(i); Continue; end;
													10: batch_overwrite:=true;
											end;
										 end;
									2: begin inc(i); Continue; end;
									3: begin
											i2:=0; tmp := FileName;
											while(FileExists(FileName)) do begin
												FileName := ExtractFilePath(tmp);
												FileName := FileName + ExtractFileNameWithoutExt(tmp);
												FileName := FileName + ' (' + inttostr(i2)+')'+ExtractFileExt(tmp);
												inc(i2);
											end;
										end;
									end;
							save_file(FileName,True);
							if batchForm.CheckBox3.Checked then
								SetFileTimes(FileName,FileTimes);
						end;
						inc(i);
					end;
				end;
		if batchForm.ComboBox2.ItemIndex = 1 then
			Call(ShellExecute_explore,ExtractFileDir(FileName));
		Call(batchform_enable,'');
		Call(batchform_show,'');
		if batchForm.CheckBox6.Checked then
			synchronize(batchform.Close)
end else
{$ENDREGION}

{#region large files}{$REGION}
if ToDo = 'large_file' then  //Max file size: 8192Gb
begin
	FileName := Trim(batchForm.Edit2.Text);
	SaveName := Trim(batchForm.Edit3.Text);

	if (FileName = SaveName) and (batchForm.ListBox3.ItemIndex <> 4) then begin
		Call(messagedlg_warning, SBatchPathsMustDiff);
		goto _exit;
	end;

	if batchForm.ListBox3.ItemIndex = 4 then //(freq analysis)
		SaveName := SaveName + '.txt';

	if FileExists(SaveName) then begin
		Call(messagedlg_overwrite,SaveName);
		if messageDlgResult = 7 then begin
		 goto _exit;
		end;
	end;

	Call(batchform_hide,'');
	FileStream1 := TFileStream.Create(FileName,fmOpenRead);
	FileStream2 := TFileStream.Create(SaveName,fmCreate);
	_FileSize := FileStream1.Size;
	case batchForm.ListBox3.ItemIndex of
		0:	begin {encode}
					Call(progressform_panel1_caption, SBFPEncoding);
					invert(keyptr); //Turbo mode forced here
					i64	:= Trunc(_fileSize / _64Mb); //count of 64Mb blocks
					setLength(binary_data, _64Mb);

					//1-st pass: large 64Mb block
					blockSize := _64Mb;
					i264 := 0;
					while I264 < i64 do begin
						DynBlockRead(1);

						file_decode(@binary_data,keyptr);
						self.progress := self.progress + (_64Mb / 3 / _FileSize);

						DynBlockWrite(1);
						inc(i264);
					end;

					//2-nd pass: 4Kb blocks
					DynBlockRead(2);

					file_decode(@binary_data,keyptr);
					self.progress := self.progress + i64 * 4096 / 3 / _FileSize;

					DynBlockWrite(2);

					//3-rd pass: last bytes...
					DynBlockRead(3);

					file_decode(@binary_data,keyptr);

					DynBlockWrite(3);
					invert(keyptr);
				end;
		1: begin {decode}
					Call(progressform_panel1_caption,'Big File Processing (decode)');
					i64	:= Trunc(_fileSize / _64Mb); //count of 64Mb blocks
					setLength(binary_data, _64Mb);

					//1-st pass: large 64Mb block
					blockSize := _64Mb;
					i264 := 0;
					while I264 < i64 do begin
						DynBlockRead(1);

						file_decode(@binary_data,keyptr);
						self.progress := self.progress + (_64Mb / 3 / _FileSize);

						DynBlockWrite(1);
						inc(i264);
					end;

					//2-nd pass: 4Kb blocks
					DynBlockRead(2);

					file_decode(@binary_data,keyptr);
					self.progress := self.progress + i64 * 4096 / 3 / _FileSize;

					DynBlockWrite(2);

					//3-rd pass: last bytes...
					DynBlockRead(3);

					file_decode(@binary_data,keyptr);

					DynBlockWrite(3);
				end;
		2: begin {encode2}
					Call(progressform_panel1_caption, SBFPEncoding2);
					invert(keyptr2); //Turbo mode forced here
					i64	:= Trunc(_fileSize / _64Mb); //count of 64Mb blocks
					setLength(binary_data, _64Mb);

					//1-st pass: large 64Mb block
					blockSize := _64Mb;
					i264 := 0;
					while I264 < i64 do begin
						DynBlockRead(1);

						file_decode_2dimm(@binary_data,keyptr2,i264*_64Mb, 0);{ TODO : With dyn key generation }
						self.progress := self.progress + (_64Mb / 3 / _FileSize);

						DynBlockWrite(1);
						inc(i264);
					end;

					//2-nd pass: 4Kb blocks
					DynBlockRead(2);

					file_decode_2dimm(@binary_data,keyptr2,Trunc(_fileSize/_64Mb)*_64Mb, 0);
					self.progress := self.progress + i64 * 4096 / 3 / _FileSize;

					DynBlockWrite(2);

					//3-rd pass: last bytes...
					DynBlockRead(3);

					file_decode_2dimm(@binary_data,keyptr2, _FileSize - i, 0);

					DynBlockWrite(3);
					invert(keyptr2);
				end;
		3: begin {decode2}
					Call(progressform_panel1_caption, SBFPDecoding2);
					i64	:= Trunc(_fileSize / _64Mb); //count of 64Mb blocks
					setLength(binary_data, _64Mb);

					//1-st pass: large 64Mb block
					blockSize := _64Mb;
					i264 := 0;
					while I264 < i64 do begin
						DynBlockRead(1);

						file_decode_2dimm(@binary_data,keyptr2,i264*_64Mb, 0);
						self.progress := self.progress + (_64Mb / 3 / _FileSize);

						DynBlockWrite(1);
						inc(i264);
					end;

					//2-nd pass: 4Kb blocks
					DynBlockRead(2);

					file_decode_2dimm(@binary_data,keyptr2,Trunc(_fileSize/_64Mb)*_64Mb, 0);
					self.progress := self.progress + i64 * 4096 / 3 / _FileSize;

					DynBlockWrite(2);

					//3-rd pass: last bytes...
					DynBlockRead(3);

					file_decode_2dimm(@binary_data,keyptr2, _FileSize - i, 0);

					DynBlockWrite(3);
				end;
		4: begin {frequency analysis}
					Call(progressform_panel1_caption, SBFPFrequencing);
					for I := 0 to 255 do begin
						unit38.frequence[i] := 0;
									 frequence[i]	:= 0;
					end;
					i64	:= Trunc(_fileSize / _64Mb); //count of 64Mb blocks
					setLength(binary_data, _64Mb);

					//1-st pass: large 64Mb block
					blockSize := _64Mb;
					i264 := 0;
					while I264 < i64 do begin
						DynBlockRead(1);

						frequence := Frequency_Analysis(@binary_data);
						for I := 0 to 255 do
							unit38.frequence[i] := unit38.frequence[i] + frequence[i];

						//self.progress := self.progress + (_64Mb /3 / _FileSize);
						inc(i264);
					end;

					//2-nd pass: 4Kb blocks
					DynBlockRead(2);

					frequence := Frequency_Analysis(@binary_data);
					for I := 0 to 255 do
						unit38.frequence[i] := unit38.frequence[i] + frequence[i];

					self.progress := self.progress + i64 * 4096 / 2 / _FileSize;

					//3-rd pass: last bytes...
					DynBlockRead(3);	

					frequence := Frequency_Analysis(@binary_data);
					for I := 0 to 255 do
						unit38.frequence[i] := unit38.frequence[i] + frequence[i];

					Tmp := 'Frequency analysis.'+#$0D+#$0A+
								 'File Name: '+FileName+#$0D+#$0A+
								 'File Size: '+inttostr(_FileSize)+' bytes'+#$0D+#$0A;
					i64 := $7FFFFFFFFFFFFFFF;
					for I := 0 to 255 do
						if i64 > unit38.frequence[i] then begin
							i64 := unit38.frequence[i];
							oneByte := i;
						end;
					Tmp := Tmp + 'Min: ' + inttostr(i64) + ' (#' + inttohex(oneByte,2) + ')' + #$0D+#$0A;
					i264:= i64;
					i64 := 0;
					for I := 0 to 255 do
						if i64 < unit38.frequence[i] then begin
							i64 := unit38.frequence[i];
							oneByte := i;
						end;
					Tmp := Tmp + 'Max: ' + inttostr(i64) + ' (#' + inttohex(oneByte,2) + ')' + #$0D+#$0A;
					ext := (i64 + i264) / 2;
					Tmp := Tmp + 'Mean: ' + floattostrf(ext,ffgeneral,30,20) + #$0D+#$0A;
					ext := 0;
					for I := 0 to 255 do
						ext := ext + unit38.frequence[i] / 256;
					Tmp := Tmp + 'Average: ' + floattostrf(ext,ffgeneral,30,20) + #$0D+#$0A+#$0D+#$0A;
					for I := 0 to length(tmp) - 1 do
						buf[i] := ord(tmp[i+1]);

					FileStream2.write(buf, length(tmp));
					for I := 0 to 255 do begin
						if batchForm.CheckBox8.Checked then
							Tmp := inttostr(i)+' '+inttostr(unit38.frequence[i])+#$0D+#$0A
						else
              Tmp := inttostr(unit38.frequence[i])+#$0D+#$0A;
						for I2 := 0 to length(tmp) - 1 do
							buf[i2] := ord(tmp[i2+1]);
						FileStream2.write(buf, length(tmp));
					end;
					
					Call(Form39_Draw_graph,'');
				end;
			end;
			self.progress := 1;
			FileStream1.Free;
			FileStream2.Free;
			binary_data := '';
			if batchForm.ComboBox2.ItemIndex = 1 then
				Call(ShellExecute_explore,ExtractFileDir(SaveName));
			Call(batchform_enable,'');
			Call(batchform_show,'');
			if batchForm.CheckBox6.Checked then
				synchronize(batchform.Close)
end else
{$ENDREGION}

{#region misc.}{$REGION}
if Todo = 'multifart' then
begin
	SaveName := Params;
	Call(progressform_panel1_caption, SOnePerData);
	i2 := length(keyptr2^);
	blockSize := length(binary_data);
	self.progress := 0;
	for I := 0 to i2 - 1 do begin
		Call(progressform_panel1_caption,SOnePerData + ' ('+inttostr(i)+' of '+inttostr(i2)+')');
		keyptr^ := keyptr2^[i];
		if batchForm.CheckBox9.Checked then begin
			file_decode(pointer, keyptr);
			Save_File(ExtractFilePath(saveName) +
								ExtractFileNameWithoutExt(saveName) +
								' (' +
								inttostr(i) +
								')' +
								ExtractFileExt(saveName), true);
			invert(keyptr);
			file_decode(pointer, keyptr);
			invert(keyptr);
		end else begin
			invert(keyptr);
			file_decode(pointer, keyptr);
			invert(keyptr);
			Save_File(ExtractFilePath(saveName) +
								ExtractFileNameWithoutExt(saveName) +
								' (' +
								inttostr(i) +
								')' +
								ExtractFileExt(saveName), true);
			file_decode(pointer, keyptr);
		end;

		self.progress := self.progress + 1 / i2;
	end;
	self.progress := 1;

	Call(batchform_enable,'');
	Call(batchform_show,'');
	if batchForm.ComboBox2.ItemIndex = 1 then
		Call(ShellExecute_explore,ExtractFileDir(SaveName));
	if batchForm.CheckBox6.Checked then
		synchronize(batchform.Close)

end else
if Todo = 'warp' then
begin
	SaveName := Params;
	Call(progressform_panel1_caption, SWarpAnalyze);
	i2 := length(keyptr2^);
	blockSize := length(binary_data);
	self.progress := 0;
	while true do begin
		Call(progressform_panel1_caption,SWarpAnalyze + ' ('+inttostr(i2)+')');
		if batchForm.CheckBox9.Checked then begin
			file_decode_2dimm(pointer, keyptr2);
			Save_File(ExtractFilePath(saveName) +
								ExtractFileNameWithoutExt(saveName) +
								' (' +
								inttostr(i2) +
								')' +
								ExtractFileExt(saveName), true);
			invert(keyptr2);
			file_decode_2dimm(pointer, keyptr2);
			invert(keyptr2);
		end else begin
			invert(keyptr2);
			file_decode_2dimm(pointer, keyptr2);
			invert(keyptr2);
			Save_File(ExtractFilePath(saveName) +
								ExtractFileNameWithoutExt(saveName) +
								' (' +
								inttostr(i2) +
								')' +
								ExtractFileExt(saveName), true);
			file_decode_2dimm(pointer, keyptr2);
		end;
		if batchForm.checkbox10.checked then begin
			i2 := i2 div 2;
			setLength(keyptr2^, i2);
			if i2 <= 0 then
				break;
		end else begin
			dec(i2);
			if i2 <= 0 then
			 break;
			setLength(keyptr2^, i2);
		end;
		
		self.progress := self.progress + 1 / i2;
	end;
	self.progress := 1;

	Call(batchform_enable,'');
	Call(batchform_show,'');
	if batchForm.ComboBox2.ItemIndex = 1 then
		Call(ShellExecute_explore,ExtractFileDir(SaveName));
	if batchForm.CheckBox6.Checked then
		synchronize(batchform.Close)

end else

if ToDo = 'stegano' then begin
	_FileSize := length(pointer^);
	if AvaliableRAM < _FileSize*2 + 1024*256 then
		goto _exit;

	setLength(byte_array, _FileSize);
	for I := 1 to _FileSize do
		byte_array[i-1] := ord(pointer^[i]);
	Stegano(@byte_array);
end else
{$ENDREGION}

	MessageBox(	form38.Handle,
							PChar(SUnknownFunc+' "'+ ToDo +'"'),
							PChar(SError),
							MB_ICONSTOP+MB_OK);

_exit: begin
	VCLThread.Terminate;
	synchronize(progressform.Close);
	Call(batchform_enable,'');
	if (batchForm.Visible) and (not batchForm.CheckBox6.Checked) then begin
		Call(batchform_show,'');
	end;
	self.Todo := '';
end;
end;
{$ENDREGION}

{#region TVCLThread.Execute}{$REGION}
procedure TVCLThread.Execute;
var x0,progress: extended;
		CycleCnt		:	int64;
begin
	x0 := 0;
	CycleCnt := 0;
	while true do
	begin
		if terminated then
			Break;
	try begin
	if DataThread.Todo = 'large_file' then begin
		progress := (
									DataThread.Progress	 *
									DataThread._FileSize +
									encoder.progress 		 *
									DataThread.blockSize /
									DataThread._FileSize
								)                      /
								DataThread._FileSize;
		DataThread.speed := (progress - x0) / (UpdateInterval / 1000);
		x0 := progress;
	end else
	if (DataThread.Todo = 'encode_dyn') or (DataThread.Todo = 'decode_dyn') or
			((DataThread.Todo = 'batch') and (batchForm.CheckBox11.Checked)) then
	begin
		if CycleCnt mod 20 = 0 then begin
			DataThread.speed := (DataThread.Progress - x0) / (UpdateInterval / 1000) / 20;
			x0 := DataThread.Progress;
		end;
	end else
	begin
		progress := encoder.progress / (DataThread._FileSize+0.01);
		DataThread.speed := (progress - x0) / (UpdateInterval / 1000);
		x0 := progress;
	end;
	end;
	except
	end;
		Synchronize(ProgressForm.reFresh);
		inc(CycleCnt);
		sleep(UpdateInterval);
	end;
end;
{$ENDREGION}

{#region Synchronized Calls}{$REGION}
procedure TDataThread.Call(func: cardinal; params: string);
begin
	self.params := params;
	id					:= func;
	Synchronize(UpdateVCL);
end;

procedure TDataThread.UpdateVCL;
begin
	case id of
		0: if trackbar <> nil then begin
			trackbar.position:=0; //perform trackbar.onChange
			trackbar.Perform(256,38,0);
			trackbar.Perform(257,38,0);
		end;
		1: begin
				form39.draw_Graph(unit38.frequence);
		end;
		2: begin
			form38.Enabled:=false;
			form39.Enabled:=false;
			form39.lock;
			batchForm.Enabled:=false;
			form39.Button1.Enabled := false;
			form39.Button2.Enabled := false;
			form39.Button3.Enabled := false;
			form39.Button4.Enabled := false;
			form38.N1.Enabled := false;
			form38.N8.Enabled := false;
			form38.N13.Enabled := false;
		end;
		3: begin
			form38.Enabled:=true;
			form39.Enabled:=true;
			form39.unlock;
			batchForm.Enabled:=true;
			form39.Button1.Enabled := true;
			form39.Button2.Enabled := true;
			form39.Button3.Enabled := true;
			form39.Button4.Enabled := true;
			form38.N1.Enabled := true;
			form38.N8.Enabled := true;
			form38.N13.Enabled := true;
		end;
		4: form39.label39.caption:=params;
		5: progressForm.Panel1.Caption:=params;
		6: if params <> '' then
					form38.RichEdit1.Lines.Add(params)
			 else begin
					form38.RichEdit1.Lines.Clear;
					form38.RichEdit1.Lines[0]:=binary_data;
       end;
		7: batchForm.Enabled:=true;
		8: MessageDlgResult:=MessageDlg(SFileAlreadyExist +' ('+params+')',
																		mtConfirmation,
																		[mbYes,mbNo,mbYesToAll],0);
		9: MessageDlgResult:=MessageDlg(SReadError + ' "'+ params +'"',
																		mtError,
																		[mbAbort,mbRetry,mbIgnore],0);
		10:batchForm.Hide;
		11:batchForm.Show;
		12:MessageDlgResult:=MessageDlg(params, mtWarning, [mbOk], 0);
		13:form38.Cleanup_form;
		14:shellExecute (form38.Handle, 'explore',PChar(params), nil, PChar(params), SW_SHOWNORMAL);
		15:MessageDlgResult:=MessageDlg(SDynProcError,
																		mtError,
																		[mbAbort, mbRetry, mbIgnore],0);
		else 		MessageBox(	form38.Handle,
								PChar(SUnknownFunc+' "'+ inttostr(id) +'"'),
								PChar(SError),
								MB_ICONSTOP+MB_OK);
	end;
end;

{$ENDREGION}

procedure run(Todo: string);
begin
	form38.Enabled						:=	false;
	form39.Enabled						:=	false;
	batchForm.Enabled					:=	false;
	ProgressForm.show;
	DataThread 								:= 	TDataThread.Create(True);
	DataThread.Todo						:=	Todo;
	DataThread.FreeonTerminate:=	true;
	DataThread.Resume;
end;

procedure run(Todo,Params: string);
begin
	form38.Enabled						:=	false;
	form39.Enabled						:=	false;
	batchForm.Enabled					:=	false;
	ProgressForm.show;
	DataThread 								:= 	TDataThread.Create(True);
	DataThread.Todo						:=	Todo;
	DataThread.params					:=	Params;
	DataThread.FreeonTerminate:=	true;
	DataThread.Resume;
end;

procedure TDataThread.Stegano(data: PByteArray);
var bitmap: TBitmap;
begin
bitmap := TBitmap.Create();

end;

end.
